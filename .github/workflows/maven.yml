# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  workflow_dispatch:
env:
#  bucket_name: "<example-bucket-name>"
  AWS_REGION: ap-south-1
  REMOTE_HOST: "ec2-52-66-247-52.ap-south-1.compute.amazonaws.com"
  REMOTE_USER: "ec2-user"

permissions:
  contents: read
  id-token: write  
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: |
        mvn -B package --file pom.xml
        mkdir staging && cp target/*.war staging
        cd staging
        ls -ltr
    - name: Build the Docker image
      run: |
        ls -ltr
        docker build . --file Dockerfile --tag ${{secrets.DOCKERHUB_USERNAME}}/demo_123:${{ github.run_id }}  
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Push to DockerHub
      run: docker push ${{secrets.DOCKERHUB_USERNAME}}/demo_123:${{ github.run_id }}
    
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_KEY" > ~/.ssh/github-actions-key
        chmod 600 ~/.ssh/github-actions-key
        cat >>~/.ssh/config <<END
        Host ec2
        HostName $SSH_HOST
        User $SSH_USER
        IdentityFile ~/.ssh/github-actions-key
        StrictHostKeyChecking no
        END
      env:
          SSH_HOST: ${{ env.REMOTE_HOST }}
          SSH_USER: ${{ env.REMOTE_USER }}
          SSH_KEY: ${{ secrets.secrets_key_name }}
    - name: List home directory
      run: ssh ec2 'ls -la' 
    - name: Run the docker Image
      run: docker run --name sample-app -p 8080:8080 ${{secrets.DOCKERHUB_USERNAME}}/demo_123:${{ github.run_id }}
